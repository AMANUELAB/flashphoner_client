<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" minWidth="955" minHeight="600" creationComplete="init()" backgroundColor="#FFFFFF" borderColor="#EEF2F4">
	<mx:Script>
		<![CDATA[
			import com.flashphoner.Logger;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;			
			private var mic:Microphone;			
			
			//chart data
			[Bindable]
			private var lineChartDataProvider:ArrayCollection = new ArrayCollection();
			
			//console
			[Bindable]
			private var log:String ="";		
			
			//state
			private var enableDraw:Boolean = false;
			
			//variables
			private var seq:int=0;			
			private var ema:Number=0;
			private var minCount:int=0;			
			private var maxCount:int=0;
			[Bindable]
			private var gain:Number=100;			
			[Bindable]
			private var emaMax:Number=0;
			
			//drwaing scale coeff
			private var scaleCoeff:Number = 1;
			
			//Coefficients
			[Bindable]
			private var EMA_K:Number = 0.5;		
			
			[Bindable]
			private var AGC_LEVEL_MAX:Number = 80;			
			
			[Bindable]
			private var AGC_LEVEL_MIN:Number = 20;			
			
			[Bindable]
			private var DOWN_AGRESSIVE_FACTOR:Number = 1.01;				
			
			[Bindable]
			private var UP_AGRESSIVE_FACTOR:Number = 1.05;
			
			[Bindable]
			private var GAIN_LEVEL:Number=8;
			
			public function init():void{
				Logger.info("init...");
				mic = Microphone.getEnhancedMicrophone();
				mic.codec=SoundCodec.SPEEX;
				mic.encodeQuality = 6;
				mic.framesPerPacket = 1;
				mic.setLoopBack(true);
				mic.gain = 100;
				mic.setSilenceLevel(0,3600000);
				mic.setUseEchoSuppression(true);
				mic.addEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler);				
				
			}
			
			private function micSampleDataHandler(event:SampleDataEvent):void {	
				 
				var energy:Number=0;
				var outputPowerNormal:Number = Math.pow(10,GAIN_LEVEL/10);
				
				var N:int=0;
				while(event.data.bytesAvailable){				
					var sample:Number = event.data.readFloat();
					energy+=sample*sample;
					N++;
				}
				
				if (energy==0){
					return;
				}
				
				var K:Number =Math.min(Math.sqrt(outputPowerNormal*N/energy),100);				
				
				
				if (ema==0){
					ema = K;
				}else{
					ema = EMA_K*K+(1-EMA_K)*ema;
				}
				
				emaMax = Math.max(emaMax,ema);
				
				
				if (ema > AGC_LEVEL_MAX){
					maxCount=maxCount+1
					gain = Math.min(mic.gain*(Math.pow(UP_AGRESSIVE_FACTOR,maxCount)),100);					
				}else{
					maxCount=0;
				}
				
				if (ema < AGC_LEVEL_MIN){					
					minCount=minCount+1					
					gain = Math.max(mic.gain/Math.pow(DOWN_AGRESSIVE_FACTOR,minCount),80);
				}else{
					minCount=0;
				}				
				
				mic.gain = gain;				
								
				if (enableDraw){
					lineChartDataProvider.addItem({x:seq,y:K*scaleCoeff,ema:ema*scaleCoeff,gain:mic.gain});
				}
					
				var logMsg:String = "emaMax: "+emaMax+" minCount: "+minCount+" maxCount: "+maxCount+" ema: "+ema+" gain: "+mic.gain+" seq: "+seq+" K: "+K;
				
				log = logMsg+"\n"+log;				
				
				seq++;			
				
				
			}	
			
			private function updateCoeffs():void{
				Logger.info("updateCoeffs");
				AGC_LEVEL_MIN = Number(min.text);
				AGC_LEVEL_MAX = Number(max.text);
				DOWN_AGRESSIVE_FACTOR = Number(agressive.text);
				UP_AGRESSIVE_FACTOR = Number(upagressive.text);
				EMA_K = Number(emaAlpha.text);
				GAIN_LEVEL = Number(gainLevel.text);
			}
		]]>
	</mx:Script>
	
	
	<mx:TextInput id="min" x="115" y="8" text="{AGC_LEVEL_MIN}" width="35"/><mx:Label x="150" y="8" text="min_level" color="black"/>
	<mx:TextInput id="max" x="115" y="38" text="{AGC_LEVEL_MAX}" width="35"/><mx:Label x="150" y="38" text="max_level" color="black"/>
	<mx:TextInput id="agressive" x="115" y="68" text="{DOWN_AGRESSIVE_FACTOR}" width="35"/><mx:Label x="150" y="68" text="agressive" color="black"/>
	<mx:TextInput id="upagressive" x="115" y="98" text="{UP_AGRESSIVE_FACTOR}" width="35"/><mx:Label x="150" y="98" text="up agressive" color="black"/>
	<mx:TextInput id="emaAlpha" x="115" y="138" text="{EMA_K}" width="35"/><mx:Label x="150" y="138" text="EMA alpha" color="black"/>
	<mx:TextInput id="gainLevel" x="115" y="168" text="{GAIN_LEVEL}" width="35"/><mx:Label x="150" y="168" text="gainLevel" color="black"/>
	
	<mx:Label x="250" y="8" text="gain: {gain}" color="black"/>
	<mx:Label x="250" y="38" text="emaMax: {emaMax}" color="black"/>
	<mx:Label x="250" y="68" text="seq: {seq}" color="black"/>
	
	
	<mx:Button x="10" y="10" click="{this.enableDraw=true}" label="start" width="72"/>
	<mx:Button x="10" y="40" click="{this.enableDraw=false}" label="pause"/>
	<mx:Button x="10" y="70" click="{updateCoeffs()}" label="update coeffs"/>
	<mx:Button x="10" y="100" click="{this.enableDraw=false;lineChartDataProvider.removeAll();}" label="clear chart"/>
	
	<mx:SolidColorStroke id = "s1" color="blue" weight="1"/>
	<mx:SolidColorStroke id = "s2" color="red" weight="1"/>
	<mx:SolidColorStroke id = "s3" color="green" weight="1"/>	
	
	<mx:HBox width="100%" height="600" x="10" y="200" backgroundColor="#FFFFFF">
		<mx:LineChart width="50%" height="500" id="linechart" dataProvider="{lineChartDataProvider}">
			<mx:horizontalAxis>
				<mx:CategoryAxis categoryField="x"/>
			</mx:horizontalAxis>
			<mx:series>
				<mx:LineSeries displayName="MA" yField="y" form="curve" lineStroke="{s1}"/>
				<mx:LineSeries displayName="EMA" yField="ema" form="curve" lineStroke="{s2}"/>
				<mx:LineSeries displayName="GAIN" yField="gain" form="curve" lineStroke="{s3}"/>
			</mx:series>
		</mx:LineChart>
		 
		<mx:TextArea text="{log}" width="50%" height="100%"/>	
		 
	</mx:HBox>
	
	
		
</mx:Application>
