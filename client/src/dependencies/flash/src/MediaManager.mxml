<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2011 Flashphoner
All rights reserved. This Code and the accompanying materials
are made available under the terms of the GNU Public License v2.0
which accompanies this distribution, and is available at
http://www.gnu.org/licenses/old-licenses/gpl-2.0.html

Contributors:
    Flashphoner - initial API and implementation

This code and accompanying materials also available under LGPL and MPL license for Flashphoner buyers. Other license versions by negatiation. Write us support@flashphoner.com with any questions.
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:ctrl="com.flashphoner.api.communication.*"
				xmlns:mainPhone="com.flashphoner.mainphone.views.*"
				skinClass="TransparentSkin"
				creationComplete="onCreationComlete()"
				>
    <fx:Script>
        <![CDATA[
			import com.flashphoner.Logger;
			import com.flashphoner.api.APINotify;
			import com.flashphoner.api.FlashAPI;
			import com.flashphoner.api.PhoneSpeaker;
			
			import flash.utils.setTimeout;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;

        	private var flashAPI:FlashAPI;
			private var phoneSpeaker:PhoneSpeaker;
			
			[Bindable]
			private var relationMyVideo:Number = 0.8182;
			
			private var timer:Timer = new Timer(1000,0);
			
			private var count:int = 0;
			
			private function onCreationComlete():void{
				var apiNotify:APINotify = new APINotify();
				flashAPI = new FlashAPI(apiNotify);
				phoneSpeaker = flashAPI.getPhoneSpeaker();
				phoneSpeaker.percentHeight = 100;
				phoneSpeaker.percentWidth = 100;
				videoPartner.addChild(phoneSpeaker);
				videoPartner.addEventListener(Event.RESIZE,onResize);
				phoneSpeaker.changeFormat(videoPartner.width,videoPartner.height);
				
				ExternalInterface.addCallback("hasAccessToAudioAndVideo",hasAccessToAudioAndVideo);
				ExternalInterface.addCallback("getAccessToAudio",getAccessToAudio);
				ExternalInterface.addCallback("getAccessToAudioAndVideo",getAccessToAudioAndVideo);
				ExternalInterface.addCallback("changeRelationMyVideo",changeRelationMyVideo);
				
				apiNotify.notifyFlashphonerAPILoaded();
			}
			
			private function onResize(event:Event):void{
				phoneSpeaker.changeFormat(videoPartner.width,videoPartner.height);
			}
			
			public function hasAccessToAudioAndVideo():Boolean{
				var hasAccess:Boolean = flashAPI.hasAccessToAudio() && hasAccessToVideo();
		 		if (hasAccess) {
					flashAPI.videoControl.setLocal(videoMy);
					flashAPI.videoControl.attachLocal();

					videoMy.visible = true;
					
				}
				return hasAccess;
			}
			
			public function hasAccessToVideo():Boolean{
				return flashAPI.videoControl.hasAccess();
			}
			
			public function getAccessToAudio():Boolean {
				var mic:Microphone = flashAPI.getMicrophone();
				if (mic == null){
					return false;
				}
				if (!flashAPI.hasAccessToAudio()){
					mic.addEventListener(StatusEvent.STATUS, onMicrophoneStatus);
					mic.setLoopBack(true);
					videoMy.visible = false;
					timer.addEventListener(TimerEvent.TIMER, timerTick);
					timer.start();					
				}
				return true;
			}
			
			public function getAccessToAudioAndVideo():Boolean {
				if (flashAPI.videoControl.getCam() == null){
					return false;
				}
				
				return getAccessToAudio();
			}
			
			private function timerTick(event:TimerEvent):void{
				if (flashAPI.hasAccessToAudio()){
					timer.stop();
					var mic:Microphone = flashAPI.getMicrophone();
					mic.setLoopBack(false);
				}
			}			
			
			private function onMicrophoneStatus(event:StatusEvent):void {
				Logger.info("onMicrophoneStatus " + event.code);
			}
			
			public function changeRelationMyVideo(relation:Number):void{
				relationMyVideo = relation; 
			}
        ]]>       
    </fx:Script>
	<!--
	<mx:TextArea id="messageAccess" editable="false" text="To do that, you should allow the camera and microphone. Open Security Panel and allow access to devices." width="185" height="96" fontSize="12" textAlign="center" x="10" y="13" borderThickness="0"/>
	-->
	<mx:Canvas id="videoPartner" width="100%" height="100%" x="0" y="0" backgroundAlpha="0.0"/>
	<mx:VideoDisplay id="videoMy" visible="false" left="0" top="0" width="25%"
					 height="{videoMy.width*relationMyVideo}"/>
</s:Application>
