<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:views="rtmfptest.views.*"
			   backgroundColor="#F2F0F0"
			   width="756"
			   height="484" creationComplete="init()" xmlns:local="*">
	<fx:Declarations>
			
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			
			private var nc:NetConnection;
			private var cam:Camera;
			private var mic:Microphone;
			private var videoFarEnd:Video;
			private var publishStream:NetStream;
			private var subscribeStream:NetStream;
			private var subscribeStreamObject:Object;
			
			private function init():void{
				cam = Camera.getCamera();
				videoMy.attachCamera(cam);
				mic = Microphone.getMicrophone();
				videoFarEnd = new Video();
				uic.addChild(videoFarEnd);
			}
			
			private function initCam():void{				
				cam.setMode(int(camWidth.text),int(camHeight.text),int(camFPS.text),true);
				cam.setQuality(0,int(camQuality.text));								
				cam.setKeyFrameInterval(int(camKeyFrame.text));
				cam.setMotionLevel(0,2000);
				Logger.info("Cam initizlized "+cam.width+"x"+cam.height);
			}
			
			private function initMic():void{				
				mic.codec = SoundCodec.SPEEX;
			    mic.encodeQuality = 5;
				mic.framesPerPacket=1;
				mic.gain=50;
				mic.setSilenceLevel(0,2000);
				Logger.info("Mic initialized");
			}
			
			/**
			 * **************************
			 * 		CONNECT / DISCONNECT
			 * **************************
			 **/
			private function connect():void{
				trace("connect");
				var url:String = connectUrl.text;
				nc = new NetConnection();
				nc.client = this;
				nc.addEventListener(NetStatusEvent.NET_STATUS, handleConnectionStatus);				
				var obj:Object = new Object();
				obj.login = login.text; 
				obj.appKey  = "flashChatApp";
				nc.connect(url,obj);	
				connectBtn.enabled = false;
			}
			
			//disconnect
			private function disconnect():void{
				nc.close();				
			}
			
			private function handleConnectionStatus(event:NetStatusEvent):void{
				Logger.info("handleConnectionStatus: "+event.info.code);				
				if (event.info.code=="NetConnection.Connect.Success"){
					Logger.info("near id: "+nc.nearID);				
					Logger.info("far id: "+nc.farID);
					Logger.info("Connection opened");
					disconnectBtn.enabled = true;
					sendBtn.enabled = true;
					publishBtn.enabled = true;
					playBtn.enabled = true;
				} else if (event.info.code=="NetConnection.Connect.Closed"){					
					nc.removeEventListener(NetStatusEvent.NET_STATUS,handleConnectionStatus);
					unpublish();
					stop();
					Logger.info("Connection closed");
					connectBtn.enabled = true;
					disconnectBtn.enabled = false;
					sendBtn.enabled = false;
					unpublishBtn.enabled = false;
					publishBtn.enabled = false;
					playBtn.enabled = false;
					stopBtn.enabled = false;
				}
			}
			
			
			/**
			 * *************************
			 * 		PUBLISH / UNPUBLISH
			 * *************************
			 **/			 
			private function publish():void{
				Logger.info("publish audio: "+publishAudio.selected+" video: "+publishVideo.selected)
				publishStream = new NetStream(nc);
				if (publishAudio.selected){
					initMic();
					publishStream.attachAudio(mic);
					Logger.info("Init audio stream")
				}
				if (publishVideo.selected){
					initCam();
					publishStream.attachCamera(cam);
					addH264();
					Logger.info("Init video stream");
				}
				addListenerAndPublish();
				Logger.info("Publishing");
				publishBtn.enabled = false;
				unpublishBtn.enabled = true;
					
			}
			
			//unpublish
			private function unpublish():void{
				Logger.info("unpublish");
				if (publishStream!=null){
					publishStream.close();
				}
				publishBtn.enabled = true;
				unpublishBtn.enabled = false;
				
			}
			
			private function addListenerAndPublish():void{
				publishStream.videoReliable=true;
				publishStream.audioReliable=false;
				publishStream.useHardwareDecoder=true;				
				publishStream.addEventListener(NetStatusEvent.NET_STATUS, handleStreamStatus);
				publishStream.bufferTime=0;				
				publishStream.publish("stream-"+login.text);
			}
			
			public function addH264():void{
				var videoStreamSettings:H264VideoStreamSettings = new H264VideoStreamSettings();
				videoStreamSettings.setProfileLevel(H264Profile.MAIN,H264Level.LEVEL_3_1);						
				publishStream.videoStreamSettings = videoStreamSettings;
			}
			
			/**
			 * *************************
			 * 		PLAY / STOP
			 * *************************
			 **/
			private function play():void{
				Logger.info("play");
				subscribeStream = new NetStream(nc);
				addListenerAndPlay();
			}
			
			private function stop():void{
				if (subscribeStream != null) {
					subscribeStream.close();
					subscribeStream = null;
				}
				if (nc != null && nc.connected) {
					nc.call("stopStream", null, subscribeStreamObject);
				}
				subscribeStreamObject = null;
				videoFarEnd.visible = false;
				stopBtn.enabled = false;
				playBtn.enabled = true;
			}
			
			private function addListenerAndPlay():void{
				subscribeStream.videoReliable=true;
				subscribeStream.audioReliable=false;
				subscribeStream.useHardwareDecoder=true;				
				subscribeStream.addEventListener(NetStatusEvent.NET_STATUS, handleSubscribeStreamStatus);
				subscribeStream.bufferTime=0;
				var soundTransform:SoundTransform = new SoundTransform();	
				soundTransform.volume=70;
				subscribeStream.soundTransform = soundTransform;	
				subscribeStreamObject = createStreamObject();
				nc.call("playStream", null, subscribeStreamObject);
				subscribeStream.play(subscribeStreamObject.mediaSessionId);
				videoFarEnd.attachNetStream(subscribeStream);
				playBtn.enabled = false;
				stopBtn.enabled = true;
				videoFarEnd.width = 320;
				videoFarEnd.height = 240;
				videoFarEnd.visible = true;
			}
			
			private function createStreamObject():Object{
				var ret:Object = new Object();
				ret.mediaSessionId = generateRandomString(8);
				ret.name = "stream-"+To.text;
				return ret; 
			}
			
			private function generateRandomString(strlen:Number):String{
				var chars:String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
				var num_chars:Number = chars.length - 1;
				var randomChar:String = "";
				
				for (var i:Number = 0; i < strlen; i++){
					randomChar += chars.charAt(Math.floor(Math.random() * num_chars));
				}
				return randomChar;
			}
			
			/**
			 * *************************
			 * 		SEND / RECEIVE CHAT MESSAGE
			 * *************************
			 **/
			
			private function sendMessage():void{
				var message:Object = new Object();
				message.body = messageText.text
				message.to = To.text;
				nc.call("sendData",null,{operationId:null, payload:message, status:null});
				chatArea.text += "I: "+message.body+"\n";
			}
			
			public function ping():void{
				nc.call("pong", null);
			}
			
			public function OnDataEvent(data:Object):void{
				var message:Object = data.payload;
				chatArea.text += message.from+": "+message.body+"\n";
			}
			
			/**
			 * ****************************
			 * 		HANDLE CONNCTION STATE
			 * ****************************
			 **/
			
			private function handleStreamStatus(event:NetStatusEvent):void{
				Logger.info("handleStreamStatus: "+event.info.code);
				if (event.info.code == "NetStream.Publish.BadName"){
					Logger.info("Bad streamName. Please publish stream with other name");
				}else if (event.info.code == "NetStream.Unpublish.Success"){
					publishStream.removeEventListener(NetStatusEvent.NET_STATUS, handleStreamStatus);
					publishStream=null;	
				}
			}
			
			private function handleSubscribeStreamStatus(event:NetStatusEvent):void{
				Logger.info("handleSubscribeStreamStatus: "+event.info.code);
			}
			
			private function asyncErrorHandler(event: AsyncErrorEvent):void{
				Logger.info("asyncErrorHandler: "+event);					
			}
			
			private function securityErrorHandler(event: SecurityErrorEvent):void{
				Logger.info("securityErrorHandler: "+event);					
			}		
			
		]]>
	</fx:Script>
	
	<!-- connect / disconnect -->
	<s:Button id="connectBtn" x="196" y="88" width="86" label="Login" click="connect()"/>
	<s:TextInput id="login" x="38" y="88" width="150" height="21" text="Bob"/>
	<s:Button id="disconnectBtn" x="290" y="88" label="Logout" click="disconnect()" width="86" enabled="false"/>
	<s:TextInput id="connectUrl" x="38" y="39" width="200" text="rtmfp://192.168.1.5:1936/live2"/>
	
	<!-- publish / unpublish -->
	<s:Button id="publishBtn" x="422" y="364" label="Send video" width="118" height="21" click="publish()" enabled="false"/>
	<s:Button id="unpublishBtn" x="590" y="364" label="Stop video" click="unpublish()" width="118" enabled="false"/>	
	<s:CheckBox id="publishAudio" x="497" y="288" label="audio" selected="true" />
	<s:CheckBox id="publishVideo" x="574" y="288" label="video" selected="true"/>	
	
	<s:Label x="471" y="344" text="width"/>
	<s:TextInput id="camWidth" x="471" y="314" width="32" text="320"/>
	
	<s:Label x="510" y="344" text="height"/>
	<s:TextInput id="camHeight" x="511" y="314" width="31" text="240"/>
	
	<s:Label x="557" y="344" text="fps"/>
	<s:TextInput id="camFPS" x="551" y="314" width="31" text="15"/>
	
	<s:Label x="591" y="344" text="quality"/>
	<s:TextInput id="camQuality" x="591" y="314" width="31" text="80"/>
	
	<s:Label x="630" y="344" text="keyframe"/>
	<s:TextInput id="camKeyFrame" x="631" y="314" width="31" text="15"/>	
	
	<!-- play / stop -->
	<s:Button id="playBtn" x="422" y="405" label="Play video" width="118" height="21" click="play()" enabled="false"/>
	<s:Button id="stopBtn" x="590" y="405" label="Stop video" width="118" height="21" click="stop()" enabled="false"/>
	
	<!-- chat -->
	<s:TextArea id="messageText" x="35" y="382" width="251" height="67" text="Hey!"/>
	<s:Button id="sendBtn" x="307" y="382" height="67" label="Send" click="sendMessage()" enabled="false"/>
	<s:TextArea id="chatArea" x="35" y="144" width="341" height="136" text=""/>
	<s:TextInput id="To" x="36" y="334" width="251" text="Alice"/>
	<s:Label x="36" y="314" width="24" text="To:"/>	
	
	<!-- console -->
	
	<!-- video view -->
	<mx:VideoDisplay id="videoMy" visible="true" x="412" y="15" width="80" height="60"  chromeColor="#EEA1A1"/>
	<mx:UIComponent id = "uic" visible="true" x="412" y="15" width="320" height="240"/>
	<s:Label x="35" y="362" width="89" text="Your message:"/>
	<s:Label x="34" y="128" width="89" text="Your chat:"/>
	<s:Label x="38" y="69" width="89" text="Your name:"/>
	<s:Label x="38" y="19" width="89" text="Server:"/>
</s:Application>
